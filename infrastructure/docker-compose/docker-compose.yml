services:
  postgres:
    image: postgres:15
    container_name: anime_postgres
    environment:
      POSTGRES_DB: anime_dashboard
      POSTGRES_USER: anime_user
      POSTGRES_PASSWORD: anime_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist DB data
      - ../sql/init.sql:/docker-entrypoint-initdb.d/init.sql # Run init script on boot
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U anime_user -d anime_dashboard"] # Check if DB is ready
      interval: 5s # Run check every 5 seconds
      timeout: 5s # Consider it failed if it takes longer than 5 seconds
      retries: 5 # Try 5 times before marking container as unhealthy

  redis:
    image: redis:7-alpine
    container_name: anime_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: ../../services/backend
      dockerfile: Dockerfile
    container_name: anime_backend
    environment:
      - DATABASE_URL=postgresql://anime_user:anime_password@postgres:5432/anime_dashboard
      - REDIS_URL=redis://redis:6379
      - TZ=UTC  # Add timezone for consistency
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../../services/backend:/app
      - ../../services/etl:/shared/etl  # Mount ETL code for backend to import
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  etl:
    build:
      context: ../../services/etl
      dockerfile: Dockerfile
    container_name: anime_etl
    environment:
      - DATABASE_URL=postgresql://anime_user:anime_password@postgres:5432/anime_dashboard
      - REDIS_URL=redis://redis:6379
      - JIKAN_BASE_URL=https://api.jikan.moe/v4
      - TZ=UTC  # Add timezone for consistency
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../../services/etl:/app
    # ETL will run as a cron job or on-demand, not continuously
    profiles:
      - etl # "docker compose --profile etl up" to run

  # ETL Scheduler Service - Automated daily data collection
  etl-scheduler:
    build:
      context: ../../services/etl
      dockerfile: Dockerfile
    container_name: anime_etl_scheduler
    environment:
      - DATABASE_URL=postgresql://anime_user:anime_password@postgres:5432/anime_dashboard
      - REDIS_URL=redis://redis:6379/0
      - JIKAN_BASE_URL=https://api.jikan.moe/v4
      - JIKAN_RATE_LIMIT_DELAY=1.0
      - TZ=UTC  # Critical: scheduler needs timezone
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../../services/etl:/app
    command: python scheduler.py --daemon
    restart: unless-stopped
    profiles:
      - scheduler  # "docker compose --profile scheduler up" to run scheduled ETL

  frontend:
    build:
      context: ../../services/frontend
      dockerfile: Dockerfile
    container_name: anime_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000  # Browser needs localhost, not service name
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ../../services/frontend:/app
      - /app/node_modules # Overrides host node_modules to let container manage its own
    command: npm start # Start React development server
    # npm run build # Uncomment for prod build

volumes:
  postgres_data:
    external: true
    name: animedashboard_postgres_data
  redis_data:
