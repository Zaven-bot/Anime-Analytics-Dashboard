services:
  postgres:
    image: ${POSTGRES_IMAGE:-postgres:15}
    container_name: ${POSTGRES_CONTAINER_NAME:-anime_postgres}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_HOST_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist DB data
      - ../sql/init.sql:/docker-entrypoint-initdb.d/init.sql # Run init script on boot
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"] # Check if DB is ready
      interval: 5s # Run check every 5 seconds
      timeout: 5s # Consider it failed if it takes longer than 5 seconds
      retries: 5 # Try 5 times before marking container as unhealthy
    networks:
      - anime-network
    restart: unless-stopped

  redis:
    image: ${REDIS_IMAGE:-redis:7-alpine}
    container_name: ${REDIS_CONTAINER_NAME:-anime_redis}
    expose:
      - "${REDIS_PORT:-6379}"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - anime-network
    restart: unless-stopped

  backend:
    build:
      context: ../../services/backend
      dockerfile: Dockerfile
    container_name: ${BACKEND_CONTAINER_NAME:-anime_backend}
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - TZ=${TZ:-UTC}
    ports:
      - "${BACKEND_HOST_PORT:-8000}:${BACKEND_CONTAINER_PORT:-8000}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - anime-network
    restart: unless-stopped

  etl:
    build:
      context: ../../services/etl
      dockerfile: Dockerfile
    container_name: ${ETL_CONTAINER_NAME:-anime_etl}
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JIKAN_BASE_URL=${JIKAN_BASE_URL:-https://api.jikan.moe/v4}
      - TZ=${TZ:-UTC}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # ETL will run as a cron job or on-demand, not continuously
    profiles:
      - etl # "docker compose --profile etl up" to run
    networks:
      - anime-network

  # ETL Scheduler Service - Automated daily data collection
  etl-scheduler:
    build:
      context: ../../services/etl
      dockerfile: Dockerfile
    container_name: ${ETL_SCHEDULER_CONTAINER_NAME:-anime_etl_scheduler}
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - JIKAN_BASE_URL=${JIKAN_BASE_URL:-https://api.jikan.moe/v4}
      - JIKAN_RATE_LIMIT_DELAY=${JIKAN_RATE_LIMIT_DELAY:-1.0}
      - TZ=${TZ:-UTC}
    expose:
      - "${ETL_METRICS_PORT:-9090}"  # Expose ETL metrics port on scheduler service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: python scheduler.py --daemon
    restart: unless-stopped
    profiles:
      - scheduler  # "docker compose --profile scheduler up" to run scheduled ETL
    networks:
      - anime-network

  frontend:
    build:
      context: ../../services/frontend
      dockerfile: Dockerfile
    container_name: ${FRONTEND_CONTAINER_NAME:-anime_frontend}
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
    ports:
      - "${FRONTEND_HOST_PORT:-3000}:${FRONTEND_CONTAINER_PORT:-3000}"
    depends_on:
      - backend
    networks:
      - anime-network
    restart: unless-stopped

  # PostgreSQL Metrics Exporter
  postgres-exporter:
    image: ${POSTGRES_EXPORTER_IMAGE:-quay.io/prometheuscommunity/postgres-exporter:latest}
    container_name: ${POSTGRES_EXPORTER_CONTAINER_NAME:-anime_postgres_exporter}
    environment:
      DATA_SOURCE_NAME: "${DATABASE_URL}?sslmode=disable"
    expose:
      - "${POSTGRES_EXPORTER_PORT:-9187}"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - observability
    networks:
      - anime-network

  # Redis Metrics Exporter  
  redis-exporter:
    image: ${REDIS_EXPORTER_IMAGE:-oliver006/redis_exporter:latest}
    container_name: ${REDIS_EXPORTER_CONTAINER_NAME:-anime_redis_exporter}
    environment:
      REDIS_ADDR: "redis:6379"
      REDIS_PASSWORD: ""  # No password set for development
    expose:
      - "${REDIS_EXPORTER_PORT:-9121}"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - observability
    networks:
      - anime-network

  # Prometheus Monitoring Server
  prometheus:
    image: ${PROMETHEUS_IMAGE:-prom/prometheus:latest}
    container_name: ${PROMETHEUS_CONTAINER_NAME:-anime_prometheus}
    ports:
      - "${PROMETHEUS_HOST_PORT:-9090}:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    depends_on:
      - backend
      - postgres-exporter
      - redis-exporter
    restart: unless-stopped
    profiles:
      - observability
    networks:
      - anime-network

  # Grafana Dashboard & Visualization Platform
  grafana:
    image: ${GRAFANA_IMAGE:-grafana/grafana:latest}
    container_name: ${GRAFANA_CONTAINER_NAME:-anime_grafana}
    ports:
      - "${GRAFANA_HOST_PORT:-3001}:3000"  # Use 3001 to avoid conflict with frontend
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_LOG_FILTERS=rendering:debug
    volumes:
      - ../observability/grafana/provisioning:/etc/grafana/provisioning:ro
      - ../observability/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped
    profiles:
      - observability
    networks:
      - anime-network

  # Loki Log Aggregation System
  loki:
    image: ${LOKI_IMAGE:-grafana/loki:latest}
    container_name: ${LOKI_CONTAINER_NAME:-anime_loki}
    ports:
      - "${LOKI_HOST_PORT:-3100}:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
    restart: unless-stopped
    profiles:
      - observability
    networks:
      - anime-network

  # Promtail Log Collection Agent  
  promtail:
    image: ${PROMTAIL_IMAGE:-grafana/promtail:latest}
    container_name: ${PROMTAIL_CONTAINER_NAME:-anime_promtail}
    volumes:
      - /var/log:/var/log:ro
      - ../observability/promtail:/etc/promtail:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped
    profiles:
      - observability
    networks:
      - anime-network

volumes:
  postgres_data:
    external: true
    name: animedashboard_postgres_data
  redis_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  anime-network:
    driver: bridge